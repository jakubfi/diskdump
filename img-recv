#!/usr/bin/env python3

import sys
import serial
import struct
from crc_algorithms import Crc

if len(sys.argv) != 2:
    sys.exit(1)

filename = sys.argv[1]

img = open(filename + ".img", "wb")
log = open(filename + ".log", "w")

s = serial.Serial("/dev/ttyUSB1",
    baudrate = 1000000,
    bytesize = serial.EIGHTBITS,
    parity = serial.PARITY_NONE,
    stopbits = serial.STOPBITS_ONE,
    timeout = None,
    xonxoff = False,
    rtscts = False,
    dsrdtr = False)

s.flushInput()
s.flushOutput()

errors = 0

# TSRICCFLDDDDDD....

failures = 0

HEADER_LEN = 9
SECTOR_LEN = 128

crc = Crc(width = 16, poly = 0x1021, reflect_in = False, xor_in = 0x1D0F, reflect_out = False, xor_out = 0x0000);

while True:
    header = s.read(HEADER_LEN)
    if len(header) < HEADER_LEN:
        print("Header len: %i" % len(header))
        sys.exit(1)

    (track, sector, ret, io_ret, csum, frame, length) = struct.unpack_from(">BBbBHBH", header)

    if frame > 1:
        print("Frame type: %i" % frame)
        sys.exit(1)

    if length != SECTOR_LEN and length != 2:
        print("Wrong frame length: %i" % length)
        sys.exit(1)

    if ret != 0:
        failures += 1

    data = s.read(length)
    if frame == 1:
        data = data * int(SECTOR_LEN/2)
    crc_calc = crc.table_driven(''.join([ chr(x) for x in data]))
    crc_res = "!!"
    if csum == crc_calc:
        crc_res = "OK"
    else:
        failures += 1

    log_line = "%2i/%2i (ret: %2i, ioret: %2i, crc: %04x/%04x (%s), frame: %1i, len: %3i) (errors: %i)" % (track, sector, ret, io_ret, csum, crc_calc, crc_res, frame, length, failures)
    print(log_line)
    log.write(log_line + "\n")

    img.write(data)

img.close()

